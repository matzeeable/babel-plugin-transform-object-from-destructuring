{"version":3,"sources":["../src/index.js"],"names":["babel","t","types","copyProperty","property","isRestProperty","isRestElement","buildCodeFrameError","node","isIdentifier","identifier","name","objectProperty","key","visitor","VariableDeclaration","path","declaration","append","isObjectPattern","isArrayPattern","appendedCnt","declarations","get","i","length","init","left","id","isAssignmentExpression","variableDeclarator","arrayExpression","objectExpression","map","filter","Boolean","right","splice"],"mappings":";;;;;;kBAiBe,UAASA,KAAT,EAAgB;AAAA,KAEtBC,CAFsB,GAG1BD,KAH0B,CAE7BE,KAF6B;;;AAK9B,UAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC/B;AACA,MAAIH,EAAEI,cAAF,CAAiBD,QAAjB,KAA8BH,EAAEK,aAAF,CAAgBF,QAAhB,CAAlC,EAA6D;AAC5D,SAAMA,SAASG,mBAAT,CACL,8EADK,CAAN;AAEA;;AAED;AACA,MAAIH,SAASI,IAAT,KAAkB,IAAtB,EAA4B;AAC3B,UAAO,IAAP;AACA;;AAED,MAAIP,EAAEQ,YAAF,CAAeL,QAAf,CAAJ,EAA8B;AAAE;AAC/B,UAAOH,EAAES,UAAF,CAAaN,SAASI,IAAT,CAAcG,IAA3B,CAAP;AACA,GAFD,MAEO;AAAE;AACR,UAAOV,EAAEW,cAAF,CACNX,EAAES,UAAF,CAAaN,SAASI,IAAT,CAAcK,GAAd,CAAkBF,IAA/B,CADM,EAENV,EAAES,UAAF,CAAaN,SAASI,IAAT,CAAcK,GAAd,CAAkBF,IAA/B,CAFM,EAGN,KAHM,EAGC;AACP,OAJM,CAID;AAJC,IAAP;AAMA;AACD;;AAED,QAAO;AACNA,QAAM,yCADA;AAENG,WAAS;AACRC,sBADQ,+BACYC,IADZ,EACkB;AACzB,QAAIC,oBAAJ;AAAA,QAAiBT,aAAjB;AAAA,QAAuBU,eAAvB;AAAA,QAA+BC,wBAA/B;AAAA,QAAgDC,uBAAhD;AAAA,QAAgEC,cAAc,CAA9E;;AAEA;AACA,QAAMC,eAAeN,KAAKO,GAAL,CAAS,cAAT,CAArB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,aAAaG,MAAjC,EAAyCD,GAAzC,EAA8C;AAC7CP,mBAAcK,aAAaE,CAAb,CAAd;AACAhB,YAAOS,YAAYT,IAAnB;AACA,SAAIA,QAAQA,KAAKkB,IAAb,IAAqBlB,KAAKkB,IAAL,CAAUC,IAAnC,EAAyC;AACxCR,wBAAkBlB,EAAEkB,eAAF,CAAkBX,KAAKkB,IAAL,CAAUC,IAA5B,CAAlB;AACAP,uBAAiBnB,EAAEmB,cAAF,CAAiBZ,KAAKkB,IAAL,CAAUC,IAA3B,CAAjB;AACA,UAAI1B,EAAEQ,YAAF,CAAeD,KAAKoB,EAApB,KACH3B,EAAE4B,sBAAF,CAAyBrB,KAAKkB,IAA9B,CADG,KAEFP,mBAAmBC,cAFjB,CAAJ,EAEsC;;AAErC;AACAF,gBAASjB,EAAE6B,kBAAF,CACRtB,KAAKoB,EADG,EAER,CAACR,iBAAiBnB,EAAE8B,eAAnB,GAAqC9B,EAAE+B,gBAAxC,EACCf,YAAYM,GAAZ,CAAgB,MAAhB,EAAwBA,GAAxB,CAA4B,MAA5B,EAAoCA,GAApC,CAAwCJ,kBAAkB,YAAlB,GAAiC,UAAzE,EAAqFc,GAArF,CAAyF9B,YAAzF,EAAuG+B,MAAvG,CAA8GC,OAA9G,CADD,CAFQ,CAAT;;AAOA;AACA3B,YAAKoB,EAAL,GAAUpB,KAAKkB,IAAL,CAAUC,IAApB;AACAnB,YAAKkB,IAAL,GAAYlB,KAAKkB,IAAL,CAAUU,KAAtB;;AAEA;AACApB,YAAKR,IAAL,CAAUc,YAAV,CAAuBe,MAAvB,CAA8Bb,IAAI,CAAJ,GAAQH,WAAtC,EAAmD,CAAnD,EAAsDH,MAAtD;AACAG;AACA;AACD;AACD;AACD;AAlCO;AAFH,EAAP;AAuCA,C","file":"index.js","sourcesContent":["/**\n * Example:\n *\n * let t = {w,a} = window,\n *     u = [x,b] = arr;\n * // Will be transformed to:\n * //\n * //    let {w,a} = window,\n * // +      t = {w,a},\n * //        [x,b] = arr,\n * // +      u = [x, b];\n * //\n *\n * Minimum of Babel v6 required.\n *\n * @see http://astexplorer.net/#/gist/de66935c4cd9d84ebe574ffb379fd9be/816ed60fe9ecc45d537b987bde9a41398bb80ab7\n */\nexport default function(babel) {\n\tconst {\n\t\ttypes: t\n\t} = babel;\n\n\tfunction copyProperty(property) {\n\t\t// Do not allow rest property\n\t\tif (t.isRestProperty(property) || t.isRestElement(property)) {\n\t\t\tthrow property.buildCodeFrameError(\n\t\t\t\t\"You are not allowed to transform an object destructuring with rest property.\");\n\t\t}\n\t\t\n\t\t// Allow null nodes, they are filtered out...\n\t\tif (property.node === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (t.isIdentifier(property)) { // Array\n\t\t\treturn t.identifier(property.node.name);\n\t\t} else { // Object\n\t\t\treturn t.objectProperty(\n\t\t\t\tt.identifier(property.node.key.name),\n\t\t\t\tt.identifier(property.node.key.name),\n\t\t\t\tfalse, // computed\n\t\t\t\ttrue // shorthand\n\t\t\t);\n\t\t}\n\t}\n\n\treturn {\n\t\tname: \"ast-transform-object-from-destructuring\",\n\t\tvisitor: {\n\t\t\tVariableDeclaration(path) {\n\t\t\t\tlet declaration, node, append, isObjectPattern, isArrayPattern, appendedCnt = 0;\n\n\t\t\t\t// Iterate declarations and search for object destructuring\n\t\t\t\tconst declarations = path.get('declarations');\n\t\t\t\tfor (let i = 0; i < declarations.length; i++) {\n\t\t\t\t\tdeclaration = declarations[i];\n\t\t\t\t\tnode = declaration.node;\n\t\t\t\t\tif (node && node.init && node.init.left) {\n\t\t\t\t\t\tisObjectPattern = t.isObjectPattern(node.init.left);\n\t\t\t\t\t\tisArrayPattern = t.isArrayPattern(node.init.left);\n\t\t\t\t\t\tif (t.isIdentifier(node.id) &&\n\t\t\t\t\t\t\tt.isAssignmentExpression(node.init) &&\n\t\t\t\t\t\t\t(isObjectPattern || isArrayPattern)) {\n\n\t\t\t\t\t\t\t// Found destructuring, create appendable properties and node...\n\t\t\t\t\t\t\tappend = t.variableDeclarator(\n\t\t\t\t\t\t\t\tnode.id,\n\t\t\t\t\t\t\t\t(isArrayPattern ? t.arrayExpression : t.objectExpression)(\n\t\t\t\t\t\t\t\t\tdeclaration.get('init').get('left').get(isObjectPattern ? 'properties' : 'elements').map(copyProperty).filter(Boolean)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Remove(*) first assignment: let *t = *{w,a} = window\n\t\t\t\t\t\t\tnode.id = node.init.left;\n\t\t\t\t\t\t\tnode.init = node.init.right;\n\n\t\t\t\t\t\t\t// Append* first modified assignment: let {w,a} = window, t = {w,a}\n\t\t\t\t\t\t\tpath.node.declarations.splice(i + 1 + appendedCnt, 0, append);\n\t\t\t\t\t\t\tappendedCnt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}"]}