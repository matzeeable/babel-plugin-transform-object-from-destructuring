{"version":3,"sources":["../src/index.js"],"names":["babel","t","types","copyProperty","property","isRestElement","buildCodeFrameError","node","isIdentifier","identifier","name","objectProperty","key","visitor","VariableDeclaration","path","declaration","append","isObjectPattern","isArrayPattern","appendedCnt","declarations","get","i","length","init","left","id","isAssignmentExpression","variableDeclarator","arrayExpression","objectExpression","map","filter","Boolean","right","splice"],"mappings":"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","sourcesContent":["/**\n * Example:\n *\n * let t = {w,a} = window,\n *     u = [x,b] = arr;\n * // Will be transformed to:\n * //\n * //    let {w,a} = window,\n * // +      t = {w,a},\n * //        [x,b] = arr,\n * // +      u = [x, b];\n * //\n *\n * Minimum of Babel v6 required.\n *\n * @see http://astexplorer.net/#/gist/de66935c4cd9d84ebe574ffb379fd9be/816ed60fe9ecc45d537b987bde9a41398bb80ab7\n */\nexport default function(babel) {\n\tconst {\n\t\ttypes: t\n\t} = babel;\n\n\tfunction copyProperty(property) {\n\t\t// Do not allow rest property\n\t\tif (t.isRestElement(property)) {\n\t\t\tthrow property.buildCodeFrameError(\n\t\t\t\t\"You are not allowed to transform an object destructuring with rest property.\");\n\t\t}\n\t\t\n\t\t// Allow null nodes, they are filtered out...\n\t\tif (property.node === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (t.isIdentifier(property)) { // Array\n\t\t\treturn t.identifier(property.node.name);\n\t\t} else { // Object\n\t\t\treturn t.objectProperty(\n\t\t\t\tt.identifier(property.node.key.name),\n\t\t\t\tt.identifier(property.node.key.name),\n\t\t\t\tfalse, // computed\n\t\t\t\ttrue // shorthand\n\t\t\t);\n\t\t}\n\t}\n\n\treturn {\n\t\tname: \"ast-transform-object-from-destructuring\",\n\t\tvisitor: {\n\t\t\tVariableDeclaration(path) {\n\t\t\t\tlet declaration, node, append, isObjectPattern, isArrayPattern, appendedCnt = 0;\n\n\t\t\t\t// Iterate declarations and search for object destructuring\n\t\t\t\tconst declarations = path.get('declarations');\n\t\t\t\tfor (let i = 0; i < declarations.length; i++) {\n\t\t\t\t\tdeclaration = declarations[i];\n\t\t\t\t\tnode = declaration.node;\n\t\t\t\t\tif (node && node.init && node.init.left) {\n\t\t\t\t\t\tisObjectPattern = t.isObjectPattern(node.init.left);\n\t\t\t\t\t\tisArrayPattern = t.isArrayPattern(node.init.left);\n\t\t\t\t\t\tif (t.isIdentifier(node.id) &&\n\t\t\t\t\t\t\tt.isAssignmentExpression(node.init) &&\n\t\t\t\t\t\t\t(isObjectPattern || isArrayPattern)) {\n\n\t\t\t\t\t\t\t// Found destructuring, create appendable properties and node...\n\t\t\t\t\t\t\tappend = t.variableDeclarator(\n\t\t\t\t\t\t\t\tnode.id,\n\t\t\t\t\t\t\t\t(isArrayPattern ? t.arrayExpression : t.objectExpression)(\n\t\t\t\t\t\t\t\t\tdeclaration.get('init').get('left').get(isObjectPattern ? 'properties' : 'elements').map(copyProperty).filter(Boolean)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Remove(*) first assignment: let *t = *{w,a} = window\n\t\t\t\t\t\t\tnode.id = node.init.left;\n\t\t\t\t\t\t\tnode.init = node.init.right;\n\n\t\t\t\t\t\t\t// Append* first modified assignment: let {w,a} = window, t = {w,a}\n\t\t\t\t\t\t\tpath.node.declarations.splice(i + 1 + appendedCnt, 0, append);\n\t\t\t\t\t\t\tappendedCnt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}"],"file":"index.js"}